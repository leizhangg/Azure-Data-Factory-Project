{
	"name": "dataflow_join2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Suppliers",
						"type": "DatasetReference"
					},
					"name": "suppliers"
				},
				{
					"dataset": {
						"referenceName": "SupplierCategories",
						"type": "DatasetReference"
					},
					"name": "supplierCategories"
				},
				{
					"dataset": {
						"referenceName": "SupplierTransactions",
						"type": "DatasetReference"
					},
					"name": "supplierTransaction"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "surrogateKey1"
				},
				{
					"name": "surrogateKey2"
				},
				{
					"name": "join1"
				},
				{
					"name": "surrogateKey3"
				},
				{
					"name": "join2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SupplierID as integer,",
				"          SupplierName as string,",
				"          SupplierCategoryID as integer,",
				"          PrimaryContactPersonID as integer,",
				"          AlternateContactPersonID as integer,",
				"          DeliveryMethodID as integer,",
				"          DeliveryCityID as integer,",
				"          PostalCityID as integer,",
				"          SupplierReference as string,",
				"          BankAccountName as string,",
				"          BankAccountBranch as string,",
				"          BankAccountCode as string,",
				"          BankAccountNumber as string,",
				"          BankInternationalCode as string,",
				"          PaymentDays as integer,",
				"          InternalComments as string,",
				"          PhoneNumber as string,",
				"          FaxNumber as string,",
				"          WebsiteURL as string,",
				"          DeliveryAddressLine1 as string,",
				"          DeliveryAddressLine2 as string,",
				"          DeliveryPostalCode as string,",
				"          DeliveryLocation as string,",
				"          PostalAddressLine1 as string,",
				"          PostalAddressLine2 as string,",
				"          PostalPostalCode as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp,",
				"          ingest_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> suppliers",
				"source(output(",
				"          SupplierCategoryID as integer,",
				"          SupplierCategoryName as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp,",
				"          ingest_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> supplierCategories",
				"source(output(",
				"          SupplierTransactionID as integer,",
				"          SupplierID as integer,",
				"          TransactionTypeID as integer,",
				"          PurchaseOrderID as integer,",
				"          PaymentMethodID as integer,",
				"          SupplierInvoiceNumber as integer,",
				"          TransactionDate as date,",
				"          AmountExcludingTax as float,",
				"          TaxAmount as float,",
				"          TransactionAmount as float,",
				"          OutstandingBalance as boolean,",
				"          FinalizationDate as date,",
				"          IsFinalized as boolean,",
				"          LastEditedBy as integer,",
				"          LastEditedWhen as date,",
				"          ingest_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> supplierTransaction",
				"suppliers keyGenerate(output(surrogate_key_supplier as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"supplierCategories keyGenerate(output(surrogate_key_SC as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey2",
				"surrogateKey1, surrogateKey2 join(suppliers@SupplierCategoryID == supplierCategories@SupplierCategoryID,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"supplierTransaction keyGenerate(output(surrogate_key_ST as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey3",
				"join1, surrogateKey3 join(suppliers@SupplierID == supplierTransaction@SupplierID,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2"
			]
		}
	}
}