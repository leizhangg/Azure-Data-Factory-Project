{
	"name": "dataflow_integration_",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "source_application_city",
						"type": "DatasetReference"
					},
					"name": "sourceApplicationCity"
				},
				{
					"dataset": {
						"referenceName": "source_application_state",
						"type": "DatasetReference"
					},
					"name": "sourceApplicationState"
				},
				{
					"dataset": {
						"referenceName": "source_application_countries",
						"type": "DatasetReference"
					},
					"name": "sourceApplicationCountry"
				},
				{
					"dataset": {
						"referenceName": "applicationEmployee",
						"type": "DatasetReference"
					},
					"name": "applicationPeople"
				},
				{
					"dataset": {
						"referenceName": "source_PaymentMethod",
						"type": "DatasetReference"
					},
					"name": "sourcePaymentMethod"
				},
				{
					"dataset": {
						"referenceName": "source_warehouse_stockitem",
						"type": "DatasetReference"
					},
					"name": "sourceWarehouseStockitem"
				},
				{
					"dataset": {
						"referenceName": "source_warehouse_colors",
						"type": "DatasetReference"
					},
					"name": "sourceWarehouseColors"
				},
				{
					"dataset": {
						"referenceName": "source_warehouse_packageType",
						"type": "DatasetReference"
					},
					"name": "sourceWarehousePackageType"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "integrationCityStaging",
						"type": "DatasetReference"
					},
					"name": "sinkToCityStaging"
				},
				{
					"dataset": {
						"referenceName": "IntegrationEmployeeStaging",
						"type": "DatasetReference"
					},
					"name": "sinkToEmployeeStaging"
				},
				{
					"dataset": {
						"referenceName": "IntegrationPaymentMethodStaging",
						"type": "DatasetReference"
					},
					"name": "sinkIntegrationPaymentMethod"
				}
			],
			"transformations": [
				{
					"name": "selectCity"
				},
				{
					"name": "selectState"
				},
				{
					"name": "selectCountry"
				},
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "EmployeeStagingKey"
				},
				{
					"name": "filterEmployee"
				},
				{
					"name": "PaymentMethodStagingKey"
				},
				{
					"name": "select3"
				},
				{
					"name": "CityStaingKey"
				},
				{
					"name": "joinStockBuyingPackage"
				},
				{
					"name": "joinColor"
				},
				{
					"name": "select6"
				},
				{
					"name": "select7"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CityID as integer,",
				"          CityName as string,",
				"          StateProvinceID as integer,",
				"          Location as binary,",
				"          LatestRecordedPopulation as long,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sourceApplicationCity",
				"source(output(",
				"          StateProvinceID as integer,",
				"          StateProvinceCode as string,",
				"          StateProvinceName as string,",
				"          CountryID as integer,",
				"          SalesTerritory as string,",
				"          Border as binary,",
				"          LatestRecordedPopulation as long,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sourceApplicationState",
				"source(output(",
				"          CountryID as integer,",
				"          CountryName as string,",
				"          FormalName as string,",
				"          IsoAlpha3Code as string,",
				"          IsoNumericCode as integer,",
				"          CountryType as string,",
				"          LatestRecordedPopulation as long,",
				"          Continent as string,",
				"          Region as string,",
				"          Subregion as string,",
				"          Border as binary,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sourceApplicationCountry",
				"source(output(",
				"          PersonID as integer,",
				"          FullName as string,",
				"          PreferredName as string,",
				"          SearchName as string,",
				"          IsPermittedToLogon as boolean,",
				"          LogonName as string,",
				"          IsExternalLogonProvider as boolean,",
				"          HashedPassword as binary,",
				"          IsSystemUser as boolean,",
				"          IsEmployee as boolean,",
				"          IsSalesperson as boolean,",
				"          UserPreferences as string,",
				"          PhoneNumber as string,",
				"          FaxNumber as string,",
				"          EmailAddress as string,",
				"          Photo as binary,",
				"          CustomFields as string,",
				"          OtherLanguages as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> applicationPeople",
				"source(output(",
				"          PaymentMethodID as integer,",
				"          PaymentMethodName as string,",
				"          LastEditedBy as integer,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourcePaymentMethod",
				"source(output(",
				"          StockItemID as integer,",
				"          StockItemName as string,",
				"          SupplierID as integer,",
				"          ColorID as integer,",
				"          UnitPackageID as integer,",
				"          OuterPackageID as integer,",
				"          Brand as string,",
				"          Size as string,",
				"          LeadTimeDays as integer,",
				"          QuantityPerOuter as integer,",
				"          IsChillerStock as boolean,",
				"          Barcode as string,",
				"          TaxRate as decimal(18,3),",
				"          UnitPrice as decimal(18,2),",
				"          RecommendedRetailPrice as decimal(18,2),",
				"          TypicalWeightPerUnit as decimal(18,3),",
				"          MarketingComments as string,",
				"          InternalComments as string,",
				"          Photo as binary,",
				"          CustomFields as string,",
				"          Tags as string,",
				"          SearchDetails as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sourceWarehouseStockitem",
				"source(output(",
				"          ColorID as integer,",
				"          ColorName as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sourceWarehouseColors",
				"source(output(",
				"          PackageTypeID as integer,",
				"          PackageTypeName as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sourceWarehousePackageType",
				"sourceApplicationCity select(mapColumn(",
				"          CityID,",
				"          CityName,",
				"          StateProvinceID,",
				"          Location,",
				"          LatestRecordedPopulation,",
				"          ValidFrom,",
				"          ValidTo",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCity",
				"sourceApplicationState select(mapColumn(",
				"          StateProvinceID,",
				"          StateProvince = StateProvinceName,",
				"          CountryID,",
				"          SalesTerritory",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectState",
				"sourceApplicationCountry select(mapColumn(",
				"          CountryID,",
				"          CountryName,",
				"          CountryType,",
				"          Continent,",
				"          Region,",
				"          Subregion",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCountry",
				"selectCity, selectState join(selectCity@StateProvinceID == selectState@StateProvinceID,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, selectCountry join(selectState@CountryID == selectCountry@CountryID,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 select(mapColumn(",
				"          {WWI City ID} = CityID,",
				"          City = CityName,",
				"          {State Province} = StateProvince,",
				"          Country = CountryName,",
				"          Continent,",
				"          SalesTerritory,",
				"          Region,",
				"          Subregion,",
				"          Location,",
				"          {Latest Recorded Population} = LatestRecordedPopulation,",
				"          ValidFrom,",
				"          ValidTo",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"EmployeeStagingKey select(mapColumn(",
				"          {Employee Staging Key},",
				"          {WWI Employee ID} = PersonID,",
				"          Employee = FullName,",
				"          {Preferred Name} = PreferredName,",
				"          IsEmployee,",
				"          IsSalesperson,",
				"          Photo,",
				"          ValidFrom,",
				"          ValidTo",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"filterEmployee keyGenerate(output({Employee Staging Key} as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> EmployeeStagingKey",
				"applicationPeople filter(IsEmployee==true()) ~> filterEmployee",
				"sourcePaymentMethod keyGenerate(output({Payment Method Staging Key} as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> PaymentMethodStagingKey",
				"PaymentMethodStagingKey select(mapColumn(",
				"          {Payment Method Staging Key},",
				"          {WWI Payment Method ID} = PaymentMethodID,",
				"          {Payment Method} = PaymentMethodName,",
				"          {Valid From},",
				"          {Valid To}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select1 keyGenerate(output({City Staing Key} as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> CityStaingKey",
				"sourceWarehouseStockitem, sourceWarehousePackageType join(UnitPackageID == PackageTypeID,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinStockBuyingPackage",
				"sourceWarehouseStockitem, sourceWarehouseColors join(sourceWarehouseStockitem@ColorID == sourceWarehouseColors@ColorID,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinColor",
				"joinColor select(mapColumn(",
				"          StockItemID,",
				"          StockItemName,",
				"          ColorName,",
				"          Brand,",
				"          Size,",
				"          LeadTimeDays,",
				"          QuantityPerOuter,",
				"          IsChillerStock,",
				"          Barcode,",
				"          TaxRate,",
				"          UnitPrice,",
				"          RecommendedRetailPrice,",
				"          TypicalWeightPerUnit,",
				"          Photo,",
				"          ValidFrom = sourceWarehouseStockitem@ValidFrom,",
				"          ValidTo = sourceWarehouseStockitem@ValidTo",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"joinStockBuyingPackage select(mapColumn(",
				"          StockItemID,",
				"          UnitPackageID,",
				"          OuterPackageID,",
				"          {Buying Package} = PackageTypeName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select7",
				"CityStaingKey sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {City Staging Key} as integer,",
				"          {WWI City ID} as integer,",
				"          City as string,",
				"          {State Province} as string,",
				"          Country as string,",
				"          Continent as string,",
				"          {Sales Territory} as string,",
				"          Region as string,",
				"          Subregion as string,",
				"          Location as binary,",
				"          {Latest Recorded Population} as long,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          {City Staging Key} = {City Staing Key},",
				"          {WWI City ID},",
				"          City = {City Staing Key},",
				"          {State Province},",
				"          Country,",
				"          Continent,",
				"          {Sales Territory} = SalesTerritory,",
				"          Region,",
				"          Subregion,",
				"          Location,",
				"          {Latest Recorded Population},",
				"          {Valid From} = ValidFrom,",
				"          {Valid To} = ValidTo",
				"     )) ~> sinkToCityStaging",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Employee Staging Key} as integer,",
				"          {WWI Employee ID} as integer,",
				"          Employee as string,",
				"          {Preferred Name} as string,",
				"          {Is Salesperson} as boolean,",
				"          Photo as binary,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'allErrors',",
				"     transactionCommit: 'single',",
				"     reportSuccessOnError: false,",
				"     mapColumn(",
				"          {Employee Staging Key},",
				"          {WWI Employee ID},",
				"          Employee,",
				"          {Preferred Name},",
				"          {Is Salesperson} = IsSalesperson,",
				"          Photo,",
				"          {Valid From} = ValidFrom,",
				"          {Valid To} = ValidTo",
				"     )) ~> sinkToEmployeeStaging",
				"select3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Payment Method Staging Key} as integer,",
				"          {WWI Payment Method ID} as integer,",
				"          {Payment Method} as string,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          {Payment Method Staging Key},",
				"          {WWI Payment Method ID},",
				"          {Payment Method},",
				"          {Valid From},",
				"          {Valid To}",
				"     )) ~> sinkIntegrationPaymentMethod"
			]
		}
	}
}